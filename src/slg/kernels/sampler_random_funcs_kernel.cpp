#include <string>
namespace slg { namespace ocl {
std::string KernelSource_sampler_random_funcs = 
"#line 2 \"sampler_random_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2018 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxCoreRender.                                   *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Random Sampler Kernel\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if (PARAM_SAMPLER_TYPE == 0)\n"
"\n"
"uint SamplerSharedData_GetNewPixelBucketIndex(__global SamplerSharedData *samplerSharedData) {\n"
"	return atomic_inc(&samplerSharedData->pixelBucketIndex);\n"
"}\n"
"\n"
"void Sampler_InitNewSample(Seed *seed,\n"
"		__global SamplerSharedData *samplerSharedData,\n"
"		__global Sample *sample, __global float *sampleDataPathBase,\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		const uint filmSubRegion0, const uint filmSubRegion1,\n"
"		const uint filmSubRegion2, const uint filmSubRegion3) {\n"
"	const uint filmRegionPixelCount = (filmSubRegion1 - filmSubRegion0 + 1) * (filmSubRegion3 - filmSubRegion2 + 1);\n"
"\n"
"	// Update pixelIndexOffset\n"
"\n"
"	uint pixelIndexBase  = sample->pixelIndexBase;\n"
"	uint pixelIndexOffset = sample->pixelIndexOffset;\n"
"	// pixelIndexRandomStart is used to jitter the order of the pixel rendering\n"
"	uint pixelIndexRandomStart = sample->pixelIndexRandomStart;\n"
"\n"
"	pixelIndexOffset++;\n"
"	if (pixelIndexOffset > RANDOM_OCL_WORK_SIZE) {\n"
"		// Ask for a new base\n"
"		\n"
"		// Transform the bucket index in a pixel index\n"
"		pixelIndexBase = (SamplerSharedData_GetNewPixelBucketIndex(samplerSharedData) %\n"
"				(filmRegionPixelCount / RANDOM_OCL_WORK_SIZE)) * RANDOM_OCL_WORK_SIZE;\n"
"		sample->pixelIndexBase = pixelIndexBase;\n"
"\n"
"		pixelIndexOffset = 0;\n"
"\n"
"		pixelIndexRandomStart = Floor2UInt(Rnd_FloatValue(seed) * RANDOM_OCL_WORK_SIZE);\n"
"		sample->pixelIndexRandomStart = pixelIndexRandomStart;\n"
"	}\n"
"	\n"
"	// Save the new value\n"
"	sample->pixelIndexOffset = pixelIndexOffset;\n"
"\n"
"	// Initialize IDX_SCREEN_X and IDX_SCREEN_Y sample\n"
"\n"
"	const uint pixelIndex = (pixelIndexBase + pixelIndexOffset + pixelIndexRandomStart) % filmRegionPixelCount;\n"
"	const uint subRegionWidth = filmSubRegion1 - filmSubRegion0 + 1;\n"
"	const uint pixelX = filmSubRegion0 + (pixelIndex % subRegionWidth);\n"
"	const uint pixelY = filmSubRegion2 + (pixelIndex / subRegionWidth);\n"
"\n"
"	sampleDataPathBase[IDX_SCREEN_X] = pixelX + Rnd_FloatValue(seed);\n"
"	sampleDataPathBase[IDX_SCREEN_Y] = pixelY + Rnd_FloatValue(seed);\n"
"}\n"
"\n"
"__global float *Sampler_GetSampleData(__global Sample *sample, __global float *samplesData) {\n"
"	const size_t gid = get_global_id(0);\n"
"	return &samplesData[gid * TOTAL_U_SIZE];\n"
"}\n"
"\n"
"__global float *Sampler_GetSampleDataPathBase(__global Sample *sample, __global float *sampleData) {\n"
"	return sampleData;\n"
"}\n"
"\n"
"__global float *Sampler_GetSampleDataPathVertex(__global Sample *sample,\n"
"		__global float *sampleDataPathBase, const uint depth) {\n"
"	// This is never used in Random sampler\n"
"	return &sampleDataPathBase[IDX_BSDF_OFFSET + (depth - 1) * VERTEX_SAMPLE_SIZE];\n"
"}\n"
"\n"
"float Sampler_GetSamplePath(Seed *seed, __global Sample *sample,\n"
"		__global float *sampleDataPathBase, const uint index) {\n"
"	switch (index) {\n"
"		case IDX_SCREEN_X:\n"
"			return sampleDataPathBase[IDX_SCREEN_X];\n"
"		case IDX_SCREEN_Y:\n"
"			return sampleDataPathBase[IDX_SCREEN_Y];\n"
"		default:\n"
"			return Rnd_FloatValue(seed);\n"
"	}\n"
"}\n"
"\n"
"float Sampler_GetSamplePathVertex(Seed *seed, __global Sample *sample,\n"
"		__global float *sampleDataPathVertexBase,\n"
"		const uint depth, const uint index) {\n"
"	return Rnd_FloatValue(seed);\n"
"}\n"
"\n"
"void Sampler_SplatSample(\n"
"		Seed *seed,\n"
"		__global SamplerSharedData *samplerSharedData,\n"
"		__global Sample *sample, __global float *sampleData\n"
"		FILM_PARAM_DECL\n"
"		) {\n"
"	Film_AddSample(sample->result.pixelX, sample->result.pixelY,\n"
"			&sample->result, 1.f\n"
"			FILM_PARAM);\n"
"}\n"
"\n"
"void Sampler_NextSample(\n"
"		Seed *seed,\n"
"		__global SamplerSharedData *samplerSharedData,\n"
"		__global Sample *sample, __global float *sampleData,\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		const uint filmSubRegion0, const uint filmSubRegion1,\n"
"		const uint filmSubRegion2, const uint filmSubRegion3) {\n"
"	Sampler_InitNewSample(seed, samplerSharedData, sample, sampleData, filmWidth, filmHeight,\n"
"			filmSubRegion0, filmSubRegion1, filmSubRegion2, filmSubRegion3);\n"
"}\n"
"\n"
"bool Sampler_Init(Seed *seed, __global SamplerSharedData *samplerSharedData,\n"
"		__global Sample *sample, __global float *sampleData,\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		const uint filmSubRegion0, const uint filmSubRegion1,\n"
"		const uint filmSubRegion2, const uint filmSubRegion3) {\n"
"	if (get_global_id(0) == 0)\n"
"		samplerSharedData->pixelBucketIndex = 0;\n"
"	sample->pixelIndexOffset = RANDOM_OCL_WORK_SIZE;\n"
"\n"
"	Sampler_NextSample(seed, samplerSharedData, sample, sampleData, filmWidth, filmHeight,\n"
"			filmSubRegion0, filmSubRegion1, filmSubRegion2, filmSubRegion3);\n"
"\n"
"	return true;\n"
"}\n"
"\n"
"#endif\n"
; } }
